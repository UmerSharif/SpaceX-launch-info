{"version":3,"sources":["components/LaunchItem.js","components/Indicator.js","components/Launches.js","components/Launch.js","App.js","serviceWorker.js","index.js"],"names":["LaunchItem","_ref","_ref$launch","launch","flight_number","mission_name","launch_date_local","launch_success","react_default","a","createElement","className","style","maxWidth","margin","color","fontSize","react_router_dom","to","concat","type","Indicator","LAUNCHES_QUERY","gql","_templateObject","Launches","react","react_apollo_esm","query","loading","error","data","console","log","launches","map","key","Component","LAUNCH_QUERY","Launch_templateObject","Launch","this","props","match","params","parseInt","variables","_data$launch","launch_year","_data$launch$rocket","rocket","rocket_id","rocket_name","rocket_type","client","ApolloClient","uri","App","react_router","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c82188b7.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n//descructuring instead of just getting props\r\nexport default function LaunchItem({\r\n  launch: {\r\n    flight_number, //same as props.launch.flight_number\r\n    mission_name,\r\n    launch_date_local,\r\n    launch_success\r\n  }\r\n}) {\r\n  return (\r\n    <div\r\n      className=\"card text-grey bg-light  mb-3\"\r\n      style={{ maxWidth: \"80%\", margin: \"auto\" }}\r\n    >\r\n      <div className=\"card-header\">\r\n        <h4 className=\"card-title\">\r\n          Mission:{\" \"}\r\n          <span\r\n            style={{\r\n              color: launch_success ? \"#56CC9D\" : \"#FF7851\",\r\n              fontSize: \"1.4rem\"\r\n            }}\r\n          >\r\n            {mission_name}\r\n          </span>\r\n        </h4>\r\n      </div>\r\n      <div className=\"card-body\">\r\n        <p className=\"card-text\">{launch_date_local}</p>\r\n        {/* grab the flight_number in launch for the query */}\r\n        <Link to={`/Launch/${flight_number}`}>\r\n          <button type=\"button\" className=\"btn btn-info\">\r\n            Launch Detail\r\n          </button>\r\n        </Link>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"../App.css\";\r\n\r\nexport default function Indicator() {\r\n  return (\r\n    <div className=\"my-3\">\r\n      <p className=\"space-between\">\r\n        <span className=\"bg-success\" /> Success\r\n        <span className=\"bg-danger fuck\" /> Fail\r\n      </p>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component, Fragment } from \"react\";\r\nimport gql from \"graphql-tag\";\r\nimport { Query } from \"react-apollo\";\r\nimport LaunchItem from \"./LaunchItem\";\r\nimport Indicator from \"./Indicator\";\r\n\r\nconst LAUNCHES_QUERY = gql`\r\n  query LaunchesQuery {\r\n    launches {\r\n      flight_number\r\n      mission_name\r\n      launch_date_local\r\n      launch_success\r\n    }\r\n  }\r\n`;\r\n\r\nexport default class Launches extends Component {\r\n  render() {\r\n    return (\r\n      <Fragment>\r\n        <div className=\"jumbotron\">\r\n          <h1 style={{ color: \"#1e999e\", fontSize: \"2rem\" }}>\r\n            Launch Information\r\n          </h1>\r\n          <p className=\"lead\">This is SpaceX launch information panel</p>\r\n          <Indicator />\r\n          <hr className=\"my-4\" />\r\n          <Query query={LAUNCHES_QUERY}>\r\n            {({ loading, error, data }) => {\r\n              if (loading) return <h4>Loading...</h4>;\r\n              if (error) console.log(error);\r\n              return (\r\n                <Fragment>\r\n                  {data.launches.map(launch => (\r\n                    <LaunchItem key={launch.flight_number} launch={launch} />\r\n                  ))}\r\n                </Fragment>\r\n              );\r\n            }}\r\n          </Query>\r\n        </div>\r\n      </Fragment>\r\n    );\r\n  }\r\n}\r\n","import React, { Component, Fragment } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport gql from \"graphql-tag\";\r\nimport { Query } from \"react-apollo\";\r\n\r\nconst LAUNCH_QUERY = gql`\r\n  query LaunchQuery($flight_number: Int!) {\r\n    launch(flight_number: $flight_number) {\r\n      flight_number\r\n      mission_name\r\n      launch_year\r\n      launch_success\r\n      launch_date_local\r\n      rocket {\r\n        rocket_id\r\n        rocket_name\r\n        rocket_type\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default class Launch extends Component {\r\n  render() {\r\n    let { flight_number } = this.props.match.params;\r\n    flight_number = parseInt(flight_number);\r\n    console.log(flight_number);\r\n    return (\r\n      <div>\r\n        <hr />\r\n        <Query query={LAUNCH_QUERY} variables={{ flight_number }}>\r\n          {({ loading, error, data }) => {\r\n            if (loading) return <h4>Loading...</h4>;\r\n            if (error) console.log(error);\r\n\r\n            const {\r\n              mission_name,\r\n              flight_number,\r\n              launch_year,\r\n              launch_success,\r\n              rocket: { rocket_id, rocket_name, rocket_type }\r\n            } = data.launch;\r\n\r\n            return (\r\n              <Fragment>\r\n                <Fragment>\r\n                  <h3 style={{ color: \"#1e999e\" }}>Mission : {mission_name}</h3>\r\n                </Fragment>\r\n                <Fragment>\r\n                  <div\r\n                    className=\"card text-grey bg-light mb-3\"\r\n                    style={{ maxWidth: \"80%\", margin: \"auto\" }}\r\n                  >\r\n                    <div className=\"card-header\">\r\n                      <h4 className=\"card-title\" style={{ color: \"#1496ed\" }}>\r\n                        Mission Detail\r\n                      </h4>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                      <p className=\"card-text\">\r\n                        <ul className=\"list-group\">\r\n                          <li className=\"list-group-item\">\r\n                            Flight Number: {flight_number}\r\n                          </li>\r\n                          <li className=\"list-group-item\">\r\n                            Launch Year: {launch_year}\r\n                          </li>\r\n                          <li className=\"list-group-item\">\r\n                            Launch Success:{\" \"}\r\n                            <span\r\n                              style={{\r\n                                color: launch_success ? \"#56CC9D\" : \"#FF7851\"\r\n                              }}\r\n                            >\r\n                              {launch_success ? \"YES\" : \"NO\"}\r\n                            </span>\r\n                          </li>\r\n                        </ul>\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div\r\n                    className=\"card text-grey bg-light mb-3\"\r\n                    style={{ maxWidth: \"80%\", margin: \"auto\" }}\r\n                  >\r\n                    <div className=\"card-header\">\r\n                      <h4 className=\"card-title\" style={{ color: \"#1496ed\" }}>\r\n                        Rocket Detail\r\n                      </h4>\r\n                    </div>\r\n                    <div className=\"card-body\">\r\n                      <p className=\"card-text\">\r\n                        <ul className=\"list-group\">\r\n                          <li className=\"list-group-item\">\r\n                            Rocket ID: {rocket_id}\r\n                          </li>\r\n                          <li className=\"list-group-item\">\r\n                            Rocket Name: {rocket_name}\r\n                          </li>\r\n                          <li className=\"list-group-item\">\r\n                            Launch Success: {rocket_type}\r\n                          </li>\r\n                        </ul>\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                </Fragment>\r\n              </Fragment>\r\n            );\r\n          }}\r\n        </Query>\r\n\r\n        <Link to={`/`}>\r\n          <button type=\"button\" className=\"btn btn-info\">\r\n            Go Back\r\n          </button>\r\n        </Link>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import \"./App.css\";\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\nimport React, { Component } from \"react\";\nimport Launches from \"./components/Launches\";\nimport Launch from \"./components/Launch\";\n\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nconst client = new ApolloClient({\n  uri: \"/graphql\"\n});\n\nexport default class App extends Component {\n  render() {\n    return (\n      <ApolloProvider client={client}>\n        <Router>\n          <div className=\"App\">\n            <div className=\"container\">\n              <h1\n                className=\"logo\"\n                style={{ color: \"#1e999e\", fontSize: \"4rem\" }}\n              >\n                SpaceX\n              </h1>\n              <Route exact path=\"/\" component={Launches} />\n              <Route exact path=\"/launch/:flight_number\" component={Launch} />\n            </div>\n          </div>\n        </Router>\n      </ApolloProvider>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}